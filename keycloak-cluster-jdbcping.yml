#
# A script to deploy keycloak service stack using the docker swarm.
#
# To deploy the stack, run:
# $ sudo docker stack deploy -c keycloak-stack.yml keycloak
#
# Instances of PostgreSQL are restricted to the manager node;
# the databases and the logs will be stored in /var/local/docker/swarm/postgres/data

version: '3'

services:
  postgres:
      image: postgres:latest
      volumes:
        - "/var/local/docker/swarm/postgres/data:/var/lib/postgresql/data"
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: admin
      deploy:
        placement:
          constraints: [node.role == manager]

  keycloak:
      image: jboss/keycloak:latest
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: P5sw0rd
        PROXY_ADDRESS_FORWARDING: "true"
        JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
        #JGROUPS_DISCOVERY_PROPERTIES: "datasource_jndi_name=java:jboss/datasources/KeycloakDS;initialize_sql=CREATE TABLE JGROUPSPING (own_addr varchar(200) NOT NULL,bind_addr varchar(200) NOT NULL,created timestamp NOT NULL,cluster_name varchar(200) NOT NULL,ping_data blob,constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
        JGROUPS_DISCOVERY_PROPERTIES: datasource_jndi_name=java:jboss/datasources/KeycloakDS,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"

      ports:
        - 8080:8080
      depends_on:
        - postgres
      deploy:
        replicas: 2
